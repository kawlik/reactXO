{"version":3,"sources":["component/field.jsx","component/board.jsx","script/data.js","script/board.js","script/ticTacToe.js","component/game.jsx","component/range.jsx","app.jsx","index.js"],"names":["Field","id","row","col","className","data-row","data-col","Board","fields","gameID","size","mark","fieldsMap","map","elem","i","sub","j","style","gridTemplateColumns","gridTemplateRows","result","value","selector","need","setUp","document","querySelector","setEmpty","querySelectorAll","board","DATA","this","Array","fill","e","isWin","k","TicTacToe","first","AI","HU","depth","forEach","field","addEventListener","handleClick","start","event","preventDefault","gameOver","player","playerAI","shift","target","dataset","isEmpty","classList","add","testStatus","gameTie","shiftAI","console","log","playerHU","bestShift","error","isTie","best","score","minimax","alpha","beta","worst","gameWin","X","O","E","Game","useEffect","Range","name","min","max","onChange","type","App","calcNeed","data","Math","floor","calcDepth","useState","setStart","setDepth","setSize","setNeed","output","prev","onClick","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6f8feb1d.chunk.js","sourcesContent":["import React from 'react';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst Field = ({ id, row, col }) => {\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    return (\n        <div className=\"field\" id={id} data-row={row} data-col={col}></div>\n    );\n};\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default Field;","import React from 'react';\n\n//  component\nimport Field from './field';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst Board = ({ fields, gameID, mark, size }) => {\n\n    const fieldsMap = fields.map(( elem, i ) =>\n        elem.map(( sub, j ) => <Field key={`field_r${i}_c${j}`} id={`field_r${i}_c${j}`} row={i} col={j} /> )\n    );\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    const style = {\n        gridTemplateColumns: `repeat( ${size}, 1fr )`,\n        gridTemplateRows: `repeat( ${size}, 1fr )`\n    };\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    return (\n        <div id={gameID} className=\"board darkable\" style={style}>{fieldsMap}</div>\n    );\n};\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default Board;","/*   *   *   *   *   *   *   *   *   *   */\n\nconst mark = {\n\n    X:      'X',\n    O:      'O',\n    EMPTY:  ' '\n}\n\n/*   *   *   *   *   *   *   *   *   *   */\n\nconst result = {\n\n    TIE:    0,\n    WIN:    10,\n    LOSE:  -10\n}\n\n/*   *   *   *   *   *   *   *   *   *   */\n\nconst value = {\n    P_INF:  0x7FFFFFFF,\n    N_INF: -0x7FFFFFFF\n}\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport { mark, result, value };","import * as DATA from './data.js';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nclass Board {\n\n    constructor( selector, size, need ) {\n\n        this.selector = selector;\n        this.size = size;\n        this.need = need;\n\n        this.elem = null;\n        this.style = null;\n\n        //  document link refrence\n        this.fields = [];\n\n        //  2D array create\n        this.board = new Array( +size ).fill( null ).map( e => e = new Array( +size ).fill( null ));\n    }\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    setUp = () => {\n\n        this.elem = document.querySelector( this.selector );\n        if( this.elem ) {\n\n            //  empties board\n            this.setEmpty();\n\n            //  fields of board\n            this.fields = [ ...this.elem.querySelectorAll( '.field' ) ];\n\n            //  setup ok\n            return true;\n        }\n\n        //  setup not ok\n        return false;\n    }\n\n    setEmpty = () => {\n        \n        for( let i = 0; i < this.size; i++ ) {\n            for( let j = 0; j < this.size; j++ ) {\n                this.board[i][j] = DATA.mark.EMPTY;\n            }\n        }\n    }\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    isEmpty([ row, col ]) {\n\n        //  tests shift\n        if( row < 0 || row > this.size - 1 ) { return false; }\n        if( col < 0 || col > this.size - 1 ) { return false; }\n\n        //  tests board\n        if( this.board[ row ][ col ] === DATA.mark.EMPTY ) { return true; }\n\n        //  filed not empty\n        return false;\n    }\n\n    isTie( mark ) {\n\n        for( let i = 0; i < this.size; i++ ) {\n            for( let j = 0; j < this.size; j++ ) {\n                if( this.board[i][j] === DATA.mark.EMPTY ) { return false; }\n            }\n        }\n\n        return true;\n    }\n\n    isWin( mark ) {\n\n        //  tests rows\n        for( let i = 0; i < this.size; i++ ) {\n            for( let j = 0; j < this.size - this.need + 1; j++ ) {\n\n                //  posible win\n                if( this.board[i][j] === mark ) {\n\n                    let isWin = true;\n                    for( let k = 0; k < this.need; k++ ) {\n                        isWin = ( this.board[i][ j + k ] === mark ) ? isWin : false;\n                    }\n\n                    //  is true win\n                    if( isWin ) { return true; }\n                }\n            }\n        }\n\n        //  tests cols\n        for( let i = 0; i < this.size; i++ ) {\n            for( let j = 0; j < this.size - this.need + 1; j++ ) {\n\n                //  posible win\n                if( this.board[j][i] === mark ) {\n\n                    let isWin = true;\n                    for( let k = 0; k < this.need; k++ ) {\n                        isWin = ( this.board[ j + k ][i] === mark ) ? isWin : false;\n                    }\n\n                    //  is true win\n                    if( isWin ) { return true; }\n                }\n            }\n        }\n\n        //  test diagonal left-top . right-bottom\n        for( let i = 0; i < this.size - this.need + 1; i++ ) {\n            for( let j = 0; j < this.size - this.need + 1; j++ ) {\n                \n                //  posible win\n                if( this.board[i][j] === mark ) {\n\n                    let isWin = true;\n                    for( let k = 0; k < this.need; k++ ) {\n                        isWin = ( this.board[ i + k ][ j + k ] === mark ) ? isWin : false;\n                    }\n\n                    //  is true win\n                    if( isWin ) { return true; }\n                }\n            }\n        }\n\n        //  test diagonal right-top . left-bottom\n        for( let i = this.need - 1; i < this.size; i++ ) {\n            for( let j = 0; j < this.size - this.need + 1; j++ ) {\n\n                //  posible win\n                if( this.board[i][j] === mark ) {\n\n                    let isWin = true;\n                    for( let k = 0; k < this.need; k++ ) {\n                        isWin = ( this.board[ i - k ][ j + k ] === mark ) ? isWin : false;\n                    }\n\n                    //  is true win\n                    if( isWin ) { return true; }\n                }\n            }\n        }\n\n        return false;\n    }\n}\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default Board;","import * as DATA from './data.js';\nimport Board from './board.js';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nclass TicTacToe {\n\n    constructor( selector, size, need, first, AI, HU, depth ) {\n\n        this.selector = selector;\n        this.depth = +depth;\n        this.size = +size;\n        this.need = +need;\n        \n        this.player = first;\n        this.playerAI = AI;\n        this.playerHU = HU;\n\n        this.gameOver = false;\n        this.gameTie = false;\n        this.gameWin = false;\n\n        this.board = new Board( selector, size, need );\n    }\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    setUp = () => {\n\n        //  tests board\n        if( this.board.setUp() ) {\n\n            //  adds clicks\n            this.board.fields.forEach( field => field.addEventListener( 'click', ( e ) => this.handleClick( e ) ));\n\n            //  starts game\n            this.start();\n        }\n    }\n\n    handleClick = ( event ) => {\n        event.preventDefault();\n\n        //  tests\n        if( this.gameOver ) { return; }\n        if( this.player === this.playerAI ) { return; }\n\n        //  gets shift\n        const shift = { row: -1, col: -1 };\n        shift.row = +event.target.dataset.row;\n        shift.col = +event.target.dataset.col;\n\n        //  tests shift\n        if( this.board.isEmpty([ shift.row, shift.col ]) ) {\n            this.board.board[ shift.row ][ shift.col ] = this.player;\n            this.board.fields[ shift.row*this.size + shift.col ].classList.add( `__${this.player}` );\n\n            //  tests game status\n            if( this.testStatus() ) {\n\n                //  end of game detected\n                this.gameOver = true;\n                this.gameTie = this.board.isWin() ? false : true;\n                this.gameTie = this.board.isWin() ? true : false;\n\n                //  end of game\n                return;\n            }\n\n            //  changes player\n            this.player = this.playerAI;\n            this.shiftAI();\n        }\n    }\n\n    start = () => {\n\n        //  tests for AI\n        if( this.player === this.playerAI ) {\n            this.shiftAI();\n        }\n    }\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    shiftAI = () => {\n\n        console.log( this.board.board );\n\n        //  tests\n        if( this.gameOver ) { return; }\n        if( this.player === this.playerHU ) { return; }\n\n        //  gets best shift\n        const shift = this.bestShift();\n        if( this.board.isEmpty([ shift.row, shift.col ])) {\n            this.board.board[ shift.row ][ shift.col ] = this.player;\n            this.board.fields[ shift.row*this.size + shift.col ].classList.add( `__${this.player}` );\n\n            //  tests game status\n            if( this.testStatus() ) {\n    \n                //  end of game detected\n                this.gameOver = true;\n                this.gameTie = this.board.isWin() ? false : true;\n                this.gameTie = this.board.isWin() ? true : false;\n    \n                //  end of game\n                return;\n            }\n\n        } else {\n\n            //  an error has ocured\n            console.error( 'AI shift not set!!! ');\n            console.log( shift );\n        }\n\n        //  changes player\n        this.player = this.playerHU;\n    }\n\n    testStatus = () => {\n\n        if( this.board.isWin( this.player )) { return true; }\n        if( this.board.isTie( this.player )) { return true; }\n\n        return false;\n    }\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    bestShift = () => {\n\n        let best = DATA.value.N_INF;\n        const shift = { row: -1, col: -1 }\n\n        /*   *   *   *   *   *   *   *   *   *   */\n\n        for( let i = 0; i < this.size; i++ ) {\n            for( let j = 0; j < this.size; j++ ) {\n\n                //  tests for possible moves\n                if( this.board.isEmpty([ i, j ]) ) {\n\n                    //  tests move\n                    this.board.board[i][j] = this.playerAI;\n\n                    const score = this.minimax( 0, false, DATA.value.N_INF, DATA.value.P_INF );\n                    console.log( ` [ row: ${i} | col: ${j} ] :: score -> ${score} ` );\n\n                    //  better move detected\n                    if( score > best ) {\n                        best = score;\n                        shift.row = i;\n                        shift.col = j;\n                    }\n\n                    //  restores move\n                    this.board.board[i][j] = DATA.mark.EMPTY;\n                }\n            }\n        }\n\n        /*   *   *   *   *   *   *   *   *   *   */\n\n        return shift;\n    }\n\n    minimax = ( depth, AI, alpha, beta ) => {\n\n        //  terminal states\n        if( depth > this.depth ) { return DATA.result.TIE; }\n\n        if( this.board.isWin( this.playerAI )) { return ( DATA.result.WIN * ( 2*this.depth - depth )); }\n        if( this.board.isWin( this.playerHU )) { return ( DATA.result.LOSE * ( 2*this.depth - depth )); }\n        if( this.board.isTie() ) { return DATA.result.TIE; }\n\n        /*   *   *   *   *   *   *   *   *   *   */\n        if( AI )    //  MAXIMIZE\n        /*   *   *   *   *   *   *   *   *   *   */\n        {\n            let best = DATA.value.N_INF;\n            let cutoff = false;\n\n            /*   *   *   *   *   *   *   *   *   *   */\n\n            for( let i = 0; i < this.size; i++ ) {\n                for( let j = 0; j < this.size; j++ ) {\n\n                    //  tests for possible moves\n                    if( this.board.isEmpty([ i, j ]) ) {\n\n                        //  tests move\n                        this.board.board[i][j] = this.playerAI;\n\n                        const score = this.minimax( depth + 1, false, alpha, beta );\n\n                        //  better move detected\n                        if( score > best ) {\n                            best = score;\n                        }\n\n                        //  restores move\n                        this.board.board[i][j] = DATA.mark.EMPTY;\n\n                        //  alpha - beta\n                        alpha = ( score > alpha ) ? score : alpha;\n                        cutoff = ( beta <= alpha ) ? true : false;\n\n                        //  check cutoff\n                        if( cutoff ) { break; }\n                    }\n                }\n            }\n            \n            /*   *   *   *   *   *   *   *   *   *   */\n\n            return best;\n        }\n        /*   *   *   *   *   *   *   *   *   *   */\n        else        //  MINIMIZE\n        /*   *   *   *   *   *   *   *   *   *   */\n        {\n            let worst = DATA.value.P_INF;\n            let cutoff = false;\n\n            /*   *   *   *   *   *   *   *   *   *   */\n\n            for( let i = 0; i < this.size; i++ ) {\n                for( let j = 0; j < this.size; j++ ) {\n\n                    //  tests for possible moves\n                    if( this.board.isEmpty([ i, j ]) ) {\n\n                        //  tests move\n                        this.board.board[i][j] = this.playerHU;\n\n                        const score = this.minimax( depth + 1, true, alpha, beta );\n\n                        //  better move detected\n                        if( score < worst ) {\n                            worst = score;\n                        }\n\n                        //  restores move\n                        this.board.board[i][j] = DATA.mark.EMPTY;\n\n                        //  alpha - beta\n                        beta = ( score < beta ) ? score : beta;\n                        cutoff = ( beta <= alpha ) ? true : false;\n\n                        //  check cutoff\n                        if( cutoff ) { break; }\n                    }\n                }\n            }\n            \n            /*   *   *   *   *   *   *   *   *   *   */\n\n            return worst;\n        }\n        /*   *   *   *   *   *   *   *   *   *   */\n    }\n}\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default TicTacToe;","import React, { useEffect } from 'react';\n\n//  component\nimport Board from './board';\nimport TicTacToe from '../script/ticTacToe';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst mark = {\n    X: 'X',\n    O: 'O',\n    E: ' '\n}\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst Game = ({ size, need, depth }) => {\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    const fields = new Array( +size ).fill( new Array( +size ).fill( mark.E ) );\n    const gameID = \"boardTicTacToe\";\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    useEffect(() => {\n\n        const ticTacToe = new TicTacToe( `#${gameID}`, size, need, mark.X, mark.O, mark.X, depth );\n        ticTacToe.setUp();\n\n    }, [ size, need, depth ]);\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    return (\n        <>\n            <Board gameID={gameID} fields={fields} size={size} mark={mark} />\n        </>\n    );\n};\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default Game;","import React from 'react';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst Range = ({ name, value, min, max, onChange }) => {\n\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    return (\n        <div className=\"range\">\n            <span className=\"range-value\">{`${name} : ${value}`}</span>\n            <input type=\"range\" name={name} min={min} max={max} value={value} onChange={( e ) => onChange( e )} />\n        </div>\n    );\n};\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default Range;","import React, { useState } from 'react';\n\n//  component\nimport Game from './component/game';\nimport Range from './component/range';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst App = () => {\n\n    const min_size = 3;\n    const max_size = 8;\n\n    const calcNeed = ( data ) => { return Math.floor( 3*Math.log( data )); }\n    const calcDepth = ( data ) => { return Math.floor( 8 - (( 3*data ) / 4 )); }\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    const [ start, setStart ] = useState( false );\n    const [ depth, setDepth ] = useState( 9 );\n    const [ size, setSize ] = useState( 3 );\n    const [ need, setNeed ] = useState( 3 );\n\n    const toggleGame = () => {\n        setStart( prev => !prev );\n    }\n\n    const changeDepth = ( event ) => {\n        setDepth( prev => event.target.value );\n    }\n\n    const changeSize = ( event ) => {\n        setSize( prev => event.target.value );\n        setNeed( prev => calcNeed( event.target.value ));\n        setDepth( prev => calcDepth( event.target.value ));\n    }\n\n    const changeNeed = ( event ) => {\n        setNeed( prev => event.target.value );\n    }\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    const output = start\n        ?   <Game size={size} need={need} depth={depth} />\n        :   <>\n                <Range name=\"size\" value={size} onChange={changeSize} min={min_size} max={max_size} />\n                <Range name=\"need\" value={need} onChange={changeNeed} min={calcNeed(size)} max={size} />\n                <Range name=\"depth\" value={depth} onChange={changeDepth} min={min_size} max={calcDepth(size)} />\n            </>;\n\n    console.log( size );\n    console.log( need );\n    console.log( depth );\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    return (\n        <>\n            {output}\n\n            <button className=\"btn\" onClick={toggleGame}>{ start ? \"Stop\" : \"Start\" }</button>\n        </>\n    );\n};\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//  component\nimport App from './app';\n\n//  stylesheet\nimport './style/main.scss';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nReactDOM.render(\n\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n\n    document.getElementById('root')\n);"],"sourceRoot":""}