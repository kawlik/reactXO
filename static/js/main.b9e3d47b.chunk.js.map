{"version":3,"sources":["store/data.js","store/store.jsx","component/topInfo.jsx","layout/Home.jsx","component/field.jsx","component/board.jsx","script/board.js","script/ticTacToe.js","layout/Game.jsx","layout/Seti.jsx","layout/Main.jsx","app.jsx","index.js"],"names":["mark","X","O","EMPTY","result","TIE","WIN","LOSE","value","P_INF","N_INF","initialValues","gameDepth","gameNeed","gameSize","minSize","maxSize","pages","home","seti","game","calcNeed","data","Math","floor","log","calcDepth","StoreContext","createContext","StoreProvider","children","useState","setGameDepth","setGameNeed","setGameSize","gameOver","setGameOver","playerAI","setPlayerAI","playerHU","setPlayerHU","player","setPlayer","setPages","useEffect","storeValue","Provider","TopInfo","useContext","className","exact","to","Home","setPlayersMarks","mode","prev","setPlayerFirst","isAllSet","onClick","Field","id","row","col","data-row","data-col","Board","fields","gameID","size","fieldsMap","map","elem","i","sub","j","style","gridTemplateColumns","gridTemplateRows","selector","need","setUp","document","querySelector","setEmpty","querySelectorAll","board","this","Array","fill","e","isWin","k","TicTacToe","first","AI","HU","depth","callback","forEach","field","addEventListener","handleClick","start","event","preventDefault","shift","target","dataset","isEmpty","classList","add","testStatus","gameTie","shiftAI","console","bestShift","error","isTie","best","score","minimax","alpha","beta","worst","gameWin","Game","Seti","min","max","type","onChange","Main","offer","path","render","App","ReactDOM","StrictMode","getElementById"],"mappings":"idAEMA,EAAO,CAETC,EAAQ,IACRC,EAAQ,IACRC,MAAQ,KAKNC,EAAS,CAEXC,IAAQ,EACRC,IAAQ,GACRC,MAAQ,IAKNC,EAAQ,CACVC,MAAQ,WACRC,OAAQ,YAKNC,EAAgB,CAClBC,UAAW,EACXC,SAAU,EACVC,SAAU,EACVC,QAAS,EACTC,QAAS,GAKPC,EAAQ,CACVC,KAAM,GACNC,KAAM,UACNC,KAAM,QAKJC,EAAW,SAAEC,GAAY,OAAOC,KAAKC,MAAO,EAAED,KAAKE,IAAKH,KACxDI,EAAY,SAAEJ,GAAY,OAAOC,KAAKC,MAAQ,GAAGD,KAAKE,IAAKH,IAAYA,EAAKA,K,OCxC5EK,EAAeC,wBAAc,MAyDpBC,EArDO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAIrB,EAAoCC,mBAAUT,EAAmBV,WAAjE,mBAAQA,EAAR,KAAmBoB,EAAnB,KACA,EAAkCD,mBAAUT,EAAmBT,UAA/D,mBAAQA,EAAR,KAAkBoB,EAAlB,KACA,EAAkCF,mBAAUT,EAAmBR,UAA/D,mBAAQA,EAAR,KAAkBoB,EAAlB,KAEA,EAAkCH,oBAAU,GAA5C,mBAAQI,EAAR,KAAkBC,EAAlB,KACA,EAAkCL,mBAAU,MAA5C,mBAAQM,EAAR,KAAkBC,EAAlB,KACA,EAAkCP,mBAAU,MAA5C,mBAAQQ,EAAR,KAAkBC,EAAlB,KACA,EAA8BT,mBAAU,MAAxC,mBAAQU,EAAR,KAAgBC,EAAhB,KAEA,EAA4BX,mBAAUT,GAAtC,mBAAQL,EAAR,KAAe0B,EAAf,KAIAC,qBAAU,cAEP,IAIH,IAAMC,EAAa,CAGfjC,YAAWoB,eACXnB,WAAUoB,cACVnB,WAAUoB,cAGVC,WAAUC,cACVC,WAAUC,cACVC,WAAUC,cACVC,SAAQC,YAGRzB,QAAO0B,WAGPrB,QAKJ,OACI,cAACK,EAAamB,SAAd,CAAuBtC,MAAOqC,EAA9B,SACKf,K,QC3BEiB,EAlBC,WAIZ,IAAQ9B,EAAU+B,qBAAYrB,GAAtBV,MAIR,OACI,qBAAKgC,UAAU,UAAf,SACI,eAAC,IAAD,CAAMC,OAAK,EAACC,GAAIlC,EAAMC,KAAM+B,UAAU,OAAtC,gBAAgD,cAAC,IAAD,IAAhD,mB,OCkDGG,EAhEF,WAIT,MAAuCJ,qBAAYrB,GAA3CU,EAAR,EAAQA,SAAUE,EAAlB,EAAkBA,SAAUE,EAA5B,EAA4BA,OAC5B,EAAgDO,qBAAYrB,GAApDW,EAAR,EAAQA,YAAaE,EAArB,EAAqBA,YAAaE,EAAlC,EAAkCA,UAClC,EAAwBM,qBAAYrB,GAA5BV,EAAR,EAAQA,MAAOK,EAAf,EAAeA,KAET+B,EAAkB,SAAEC,GAElBA,IACAhB,GAAa,SAAAiB,GAAI,OAAIjC,EAAKtB,KAAKE,KAC/BsC,GAAa,SAAAe,GAAI,OAAIjC,EAAKtB,KAAKC,MAG9BqD,IACDhB,GAAa,SAAAiB,GAAI,OAAIjC,EAAKtB,KAAKE,KAC/BsC,GAAa,SAAAe,GAAI,OAAIjC,EAAKtB,KAAKC,OAIjCuD,EAAiB,SAAEF,GAEjBA,GACAZ,GAAW,SAAAa,GAAI,OAAIjC,EAAKtB,KAAKE,KAG5BoD,GACDZ,GAAW,SAAAa,GAAI,OAAIjC,EAAKtB,KAAKC,MAM/BwD,KAAapB,GAAYE,GAAYE,GAI3C,OACA,0BAASQ,UAAU,YAAnB,UAEI,sBAAKA,UAAU,OAAf,UACI,oBAAIA,UAAU,QAAd,2BACA,sBAAKA,UAAU,SAAf,UACI,wBAAQA,UAAU,wBAAwBS,QAAS,kBAAML,GAAgB,IAAzE,eACA,wBAAQJ,UAAU,wBAAwBS,QAAS,kBAAML,GAAgB,IAAzE,qBAIR,sBAAKJ,UAAU,OAAf,UACI,oBAAIA,UAAU,QAAd,mCACA,sBAAKA,UAAU,SAAf,UACI,wBAAQA,UAAU,wBAAwBS,QAAS,kBAAMF,GAAe,IAAxE,eACA,wBAAQP,UAAU,wBAAwBS,QAAS,kBAAMF,GAAe,IAAxE,qBAIR,cAAC,IAAD,CAAMN,OAAK,EAACC,GAAIlC,EAAME,KAAM8B,UAAS,mBAAcQ,GAAY,eAA/D,uBClDOE,EAXD,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,IAItB,OACI,qBAAKb,UAAU,QAAQW,GAAIA,EAAIG,WAAUF,EAAKG,WAAUF,KCoBjDG,EAtBD,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAEvBC,EAAYH,EAAOI,KAAI,SAAEC,EAAMC,GAAR,OACzBD,EAAKD,KAAI,SAAEG,EAAKC,GAAP,OAAc,cAAC,EAAD,CAAiCd,GAAE,iBAAYY,EAAZ,aAAkBE,GAAKb,IAAKW,EAAGV,IAAKY,GAAvE,iBAAsBF,EAAtB,aAA4BE,UAKjDC,EAAQ,CACVC,oBAAoB,WAAD,OAAaR,EAAb,WACnBS,iBAAiB,WAAD,OAAaT,EAAb,YAKpB,OACI,qBAAKR,GAAIO,EAAQlB,UAAU,iBAAiB0B,MAAOA,EAAnD,SAA2DN,K,wBCuIpDJ,E,WAxJX,WAAaa,EAAUV,EAAMW,GAAQ,IAAD,gCAkBpCC,MAAQ,WAGJ,OADA,EAAKT,KAAOU,SAASC,cAAe,EAAKJ,YACrC,EAAKP,OAGL,EAAKY,WAGL,EAAKjB,OAAL,YAAmB,EAAKK,KAAKa,iBAAkB,YAGxC,IA9BqB,KAqCpCD,SAAW,WAEP,IAAK,IAAIX,EAAI,EAAGA,EAAI,EAAKJ,KAAMI,IAC3B,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKN,KAAMM,IAC3B,EAAKW,MAAMb,GAAGE,GAAKpD,EAAUnB,OAvCrCmF,KAAKR,SAAWA,EAChBQ,KAAKlB,KAAOA,EACZkB,KAAKP,KAAOA,EAEZO,KAAKf,KAAO,KACZe,KAAKX,MAAQ,KAGbW,KAAKpB,OAAS,GAGdoB,KAAKD,MAAQ,IAAIE,OAAQnB,GAAOoB,KAAM,MAAOlB,KAAK,SAAAmB,GAAC,OAAQ,IAAIF,OAAQnB,GAAOoB,KAAM,S,2CAmCxF,YAAuB,IAAD,mBAAZ3B,EAAY,KAAPC,EAAO,KAGlB,QAAID,EAAM,GAAKA,EAAMyB,KAAKlB,KAAO,OAC7BN,EAAM,GAAKA,EAAMwB,KAAKlB,KAAO,IAG7BkB,KAAKD,MAAOxB,GAAOC,KAAUxC,EAAUnB,S,mBAM/C,SAAOH,GAEH,IAAK,IAAIwE,EAAI,EAAGA,EAAIc,KAAKlB,KAAMI,IAC3B,IAAK,IAAIE,EAAI,EAAGA,EAAIY,KAAKlB,KAAMM,IAC3B,GAAIY,KAAKD,MAAMb,GAAGE,KAAOpD,EAAUnB,MAAU,OAAO,EAI5D,OAAO,I,mBAGX,SAAOH,GAGH,IAAK,IAAIwE,EAAI,EAAGA,EAAIc,KAAKlB,KAAMI,IAC3B,IAAK,IAAIE,EAAI,EAAGA,EAAIY,KAAKlB,KAAOkB,KAAKP,KAAO,EAAGL,IAG3C,GAAIY,KAAKD,MAAMb,GAAGE,KAAO1E,EAAO,CAG5B,IADA,IAAI0F,GAAQ,EACHC,EAAI,EAAGA,EAAIL,KAAKP,KAAMY,IAC3BD,EAAUJ,KAAKD,MAAMb,GAAIE,EAAIiB,KAAQ3F,GAAS0F,EAIlD,GAAIA,EAAU,OAAO,EAMjC,IAAK,IAAIlB,EAAI,EAAGA,EAAIc,KAAKlB,KAAMI,IAC3B,IAAK,IAAIE,EAAI,EAAGA,EAAIY,KAAKlB,KAAOkB,KAAKP,KAAO,EAAGL,IAG3C,GAAIY,KAAKD,MAAMX,GAAGF,KAAOxE,EAAO,CAG5B,IADA,IAAI0F,GAAQ,EACHC,EAAI,EAAGA,EAAIL,KAAKP,KAAMY,IAC3BD,EAAUJ,KAAKD,MAAOX,EAAIiB,GAAInB,KAAOxE,GAAS0F,EAIlD,GAAIA,EAAU,OAAO,EAMjC,IAAK,IAAIlB,EAAI,EAAGA,EAAIc,KAAKlB,KAAOkB,KAAKP,KAAO,EAAGP,IAC3C,IAAK,IAAIE,EAAI,EAAGA,EAAIY,KAAKlB,KAAOkB,KAAKP,KAAO,EAAGL,IAG3C,GAAIY,KAAKD,MAAMb,GAAGE,KAAO1E,EAAO,CAG5B,IADA,IAAI0F,GAAQ,EACHC,EAAI,EAAGA,EAAIL,KAAKP,KAAMY,IAC3BD,EAAUJ,KAAKD,MAAOb,EAAImB,GAAKjB,EAAIiB,KAAQ3F,GAAS0F,EAIxD,GAAIA,EAAU,OAAO,EAMjC,IAAK,IAAIlB,EAAIc,KAAKP,KAAO,EAAGP,EAAIc,KAAKlB,KAAMI,IACvC,IAAK,IAAIE,EAAI,EAAGA,EAAIY,KAAKlB,KAAOkB,KAAKP,KAAO,EAAGL,IAG3C,GAAIY,KAAKD,MAAMb,GAAGE,KAAO1E,EAAO,CAG5B,IADA,IAAI0F,GAAQ,EACHC,EAAI,EAAGA,EAAIL,KAAKP,KAAMY,IAC3BD,EAAUJ,KAAKD,MAAOb,EAAImB,GAAKjB,EAAIiB,KAAQ3F,GAAS0F,EAIxD,GAAIA,EAAU,OAAO,EAKjC,OAAO,M,KC0HAE,EA3QX,WAAad,EAAUV,EAAMW,EAAMc,EAAOC,EAAIC,EAAIC,GAAS,IAAD,gCAuB1DhB,MAAQ,SAAEiB,GAGF,EAAKZ,MAAML,UAGX,EAAKK,MAAMnB,OAAOgC,SAAS,SAAAC,GAAK,OAAIA,EAAMC,iBAAkB,SAAS,SAAEX,GAAF,OAAS,EAAKY,YAAaZ,SAGhG,EAAKQ,SAAWA,EAGhB,EAAKK,UAnC6C,KAuC1DD,YAAc,SAAEE,GAIZ,GAHAA,EAAMC,kBAGF,EAAKrE,UACL,EAAKM,SAAW,EAAKJ,SAAzB,CAGA,IAAMoE,EAAQ,CAAE5C,KAAM,EAAGC,KAAM,GAK/B,GAJA2C,EAAM5C,KAAO0C,EAAMG,OAAOC,QAAQ9C,IAClC4C,EAAM3C,KAAOyC,EAAMG,OAAOC,QAAQ7C,IAG9B,EAAKuB,MAAMuB,QAAQ,CAAEH,EAAM5C,IAAK4C,EAAM3C,MAAS,CAK/C,GAJA,EAAKuB,MAAMA,MAAOoB,EAAM5C,KAAO4C,EAAM3C,KAAQ,EAAKrB,OAClD,EAAK4C,MAAMnB,OAAQuC,EAAM5C,IAAI,EAAKO,KAAOqC,EAAM3C,KAAM+C,UAAUC,IAA/D,YAAyE,EAAKrE,SAG1E,EAAKsE,aAQL,OALA,EAAK5E,UAAW,EAChB,EAAK6E,SAAU,EAAK3B,MAAMK,aAC1B,EAAKsB,UAAU,EAAK3B,MAAMK,SAO9B,EAAKjD,OAAS,EAAKJ,SACnB,EAAK4E,aAtE6C,KA0E1DX,MAAQ,WAGA,EAAK7D,SAAW,EAAKJ,UACrB,EAAK4E,WA9E6C,KAoF1DA,QAAU,WAKN,GAHAC,QAAQzF,IAAK,EAAK4D,MAAMA,QAGpB,EAAKlD,UACL,EAAKM,SAAW,EAAKF,SAAzB,CAGA,IAAMkE,EAAQ,EAAKU,YACnB,GAAI,EAAK9B,MAAMuB,QAAQ,CAAEH,EAAM5C,IAAK4C,EAAM3C,OAKtC,GAJA,EAAKuB,MAAMA,MAAOoB,EAAM5C,KAAO4C,EAAM3C,KAAQ,EAAKrB,OAClD,EAAK4C,MAAMnB,OAAQuC,EAAM5C,IAAI,EAAKO,KAAOqC,EAAM3C,KAAM+C,UAAUC,IAA/D,YAAyE,EAAKrE,SAG1E,EAAKsE,aAQL,OALA,EAAK5E,UAAW,EAChB,EAAK6E,SAAU,EAAK3B,MAAMK,aAC1B,EAAKsB,UAAU,EAAK3B,MAAMK,cAS9BwB,QAAQE,MAAO,wBACfF,QAAQzF,IAAKgF,GAIjB,EAAKhE,OAAS,EAAKF,WAtHmC,KAyH1DwE,WAAa,WAET,QAAI,EAAK1B,MAAMK,MAAO,EAAKjD,WACvB,EAAK4C,MAAMgC,MAAO,EAAK5E,SA5H2B,KAmI1D0E,UAAY,WAOR,IALA,IAAIG,EAAOhG,EAAWZ,MAChB+F,EAAQ,CAAE5C,KAAM,EAAGC,KAAM,GAItBU,EAAI,EAAGA,EAAI,EAAKJ,KAAMI,IAC3B,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKN,KAAMM,IAG3B,GAAI,EAAKW,MAAMuB,QAAQ,CAAEpC,EAAGE,IAAO,CAG/B,EAAKW,MAAMA,MAAMb,GAAGE,GAAK,EAAKrC,SAE9B,IAAMkF,EAAQ,EAAKC,QAAS,GAAG,EAAOlG,EAAWZ,MAAOY,EAAWb,OACnEyG,QAAQzF,IAAR,kBAAwB+C,EAAxB,mBAAoCE,EAApC,0BAAuD6C,EAAvD,MAGIA,EAAQD,IACRA,EAAOC,EACPd,EAAM5C,IAAMW,EACZiC,EAAM3C,IAAMY,GAIhB,EAAKW,MAAMA,MAAMb,GAAGE,GAAKpD,EAAUnB,MAO/C,OAAOsG,GArK+C,KAwK1De,QAAU,SAAExB,EAAOF,EAAI2B,EAAOC,GAG1B,GAAI1B,EAAQ,EAAKA,MAAU,OAAO1E,EAAYjB,IAE9C,GAAI,EAAKgF,MAAMK,MAAO,EAAKrD,UAAc,OAASf,EAAYhB,KAAQ,EAAE,EAAK0F,MAAQA,GACrF,GAAI,EAAKX,MAAMK,MAAO,EAAKnD,UAAc,OAASjB,EAAYf,MAAS,EAAE,EAAKyF,MAAQA,GACtF,GAAI,EAAKX,MAAMgC,QAAY,OAAO/F,EAAYjB,IAG9C,GAAIyF,EAEJ,CAMI,IALA,IAAIwB,EAAOhG,EAAWZ,MAKb8D,EAAI,EAAGA,EAAI,EAAKJ,KAAMI,IAC3B,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKN,KAAMM,IAG3B,GAAI,EAAKW,MAAMuB,QAAQ,CAAEpC,EAAGE,IAAO,CAG/B,EAAKW,MAAMA,MAAMb,GAAGE,GAAK,EAAKrC,SAE9B,IAAMkF,EAAQ,EAAKC,QAASxB,EAAQ,GAAG,EAAOyB,EAAOC,GAerD,GAZIH,EAAQD,IACRA,EAAOC,GAIX,EAAKlC,MAAMA,MAAMb,GAAGE,GAAKpD,EAAUnB,MAIxBuH,IADXD,EAAUF,EAAQE,EAAUF,EAAQE,GAIrB,MAO3B,OAAOH,EAWP,IALA,IAAIK,EAAQrG,EAAWb,MAKd+D,EAAI,EAAGA,EAAI,EAAKJ,KAAMI,IAC3B,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKN,KAAMM,IAG3B,GAAI,EAAKW,MAAMuB,QAAQ,CAAEpC,EAAGE,IAAO,CAG/B,EAAKW,MAAMA,MAAMb,GAAGE,GAAK,EAAKnC,SAE9B,IAAMgF,EAAQ,EAAKC,QAASxB,EAAQ,GAAG,EAAMyB,EAAOC,GAepD,GAZIH,EAAQI,IACRA,EAAQJ,GAIZ,EAAKlC,MAAMA,MAAMb,GAAGE,GAAKpD,EAAUnB,OAGnCuH,EAASH,EAAQG,EAASH,EAAQG,IACfD,EAGJ,MAO3B,OAAOE,GAjQXrC,KAAKR,SAAWA,EAChBQ,KAAKU,OAASA,EACdV,KAAKlB,MAAQA,EACbkB,KAAKP,MAAQA,EAEbO,KAAK7C,OAASoD,EACdP,KAAKjD,SAAWyD,EAChBR,KAAK/C,SAAWwD,EAEhBT,KAAKnD,UAAW,EAChBmD,KAAK0B,SAAU,EACf1B,KAAKsC,SAAU,EAEftC,KAAKD,MAAQ,IAAIpB,EAAOa,EAAUV,EAAMW,GAGxCO,KAAKW,SAAW,MCiBT4B,EA/BF,WAIT,MAA0C7E,qBAAYrB,GAA9Cb,EAAR,EAAQA,SAAUD,EAAlB,EAAkBA,SAAUD,EAA5B,EAA4BA,UAC5B,EAAuCoC,qBAAYrB,GAA3CU,EAAR,EAAQA,SAAUE,EAAlB,EAAkBA,SAAUE,EAA5B,EAA4BA,OAItByB,EAAS,IAAIqB,OAAQzE,GAAW0E,KAAM,IAAID,OAAQzE,GAAW0E,KAAM,OACnErB,EAAS,iBAaf,OATAvB,qBAAU,WAEY,IAAIgD,EAAJ,WAAmBzB,GAAUrD,EAAUD,EAAU4B,EAAQJ,EAAUE,EAAU3B,GACrFoE,UAEX,CAAElE,EAAUD,EAAUD,EAAW6B,EAAQJ,EAAUE,IAKtD,mCACI,cAAC,EAAD,CAAO2B,OAAQA,EAAQC,OAAQA,EAAQC,KAAMtD,OCkCtCgH,EA9DF,WAIT,MAA0C9E,qBAAYrB,GAA9Cb,EAAR,EAAQA,SAAUD,EAAlB,EAAkBA,SAAUD,EAA5B,EAA4BA,UAC5B,EAAmDoC,qBAAYrB,GAAvDO,EAAR,EAAQA,YAAaD,EAArB,EAAqBA,YAAaD,EAAlC,EAAkCA,aAClC,EAAwBgB,qBAAYrB,GAA5BL,EAAR,EAAQA,KAAML,EAAd,EAAcA,MAmBR8G,EAAMzG,EAAKX,cAAcI,QACzBiH,EAAM1G,EAAKX,cAAcK,QAIzByC,KAAa3C,GAAYD,GAAYD,GAI3C,OACI,0BAASqC,UAAU,YAAnB,UAEA,sBAAKA,UAAU,OAAf,UACI,oBAAIA,UAAU,QAAd,kCACA,uBAAOgF,KAAK,QAAQF,IAAKA,EAAKC,IAAKA,EAAKxH,MAAOM,EAAUoH,SAAU,SAACzC,GAAD,OA/BlDc,EA+BwEd,EA9B7FvD,GAAa,SAAAqB,GAAI,OAAIgD,EAAMG,OAAOlG,SAClCyB,EAAaX,EAAKD,SAAUkF,EAAMG,OAAOlG,aACzCwB,EAAcV,EAAKI,UAAW6E,EAAMG,OAAOlG,QAHxB,IAAE+F,KAgCjB,+BAAOzF,OAGX,sBAAKmC,UAAU,OAAf,UACI,oBAAIA,UAAU,QAAd,oCACA,uBAAOgF,KAAK,QAAQF,IAAKzG,EAAKD,SAASP,GAAWkH,IAAKlH,EAAUN,MAAOK,EAAUqH,SAAU,SAACzC,GAAD,OA9B3Ec,EA8BiGd,OA7BtHxD,GAAa,SAAAsB,GAAI,OAAIgD,EAAMG,OAAOlG,SADf,IAAE+F,KA+BjB,+BAAO1F,OAGX,sBAAKoC,UAAU,OAAf,UACI,oBAAIA,UAAU,QAAd,6BACA,uBAAOgF,KAAK,QAAQF,IAAK,EAAGC,IAAK1G,EAAKI,UAAUZ,GAAWN,MAAOI,EAAWsH,SAAU,SAACzC,GAAD,OAhCrEc,EAgC4Fd,OA/BlHxD,GAAa,SAAAsB,GAAI,OAAIgD,EAAMG,OAAOlG,SADd,IAAE+F,KAiClB,+BAAO3F,OAGX,cAAC,IAAD,CAAMsC,OAAK,EAACC,GAAIlC,EAAMG,KAAM6B,UAAS,mBAAcQ,GAAY,eAA/D,uBC9BO0E,EApBF,WAET,MAAyBnF,qBAAWrB,GAArBV,GAAf,EAAQmH,MAAR,EAAenH,OAIf,OACA,eAAC,IAAD,WAEI,cAAC,IAAD,CAAOiC,OAAK,EAACmF,KAAI,WAAMpH,EAAMC,MAAQoH,OAAQ,kBAAM,cAAC,EAAD,OAEnD,cAAC,IAAD,CAAOpF,OAAK,EAACmF,KAAI,WAAMpH,EAAMG,MAAQkH,OAAQ,kBAAM,cAAC,EAAD,OAEnD,cAAC,IAAD,CAAOpF,OAAK,EAACmF,KAAI,WAAMpH,EAAME,MAAQmH,OAAQ,kBAAM,cAAC,EAAD,WCO5CC,EArBH,WAMR,OACA,cAAC,EAAD,UACI,eAAC,IAAD,WAEI,cAAC,EAAD,IAEA,cAAC,EAAD,U,MCbZC,IAASF,OAEL,cAAC,IAAMG,WAAP,UACI,cAAC,EAAD,MAGJxD,SAASyD,eAAe,W","file":"static/js/main.b9e3d47b.chunk.js","sourcesContent":["/*   *   *   *   *   *   *   *   *   *   */\n\nconst mark = {\n\n    X:      'X',\n    O:      'O',\n    EMPTY:  ' '\n}\n\n/*   *   *   *   *   *   *   *   *   *   */\n\nconst result = {\n\n    TIE:    0,\n    WIN:    10,\n    LOSE:  -10\n}\n\n/*   *   *   *   *   *   *   *   *   *   */\n\nconst value = {\n    P_INF:  0x7FFFFFFF,\n    N_INF: -0x7FFFFFFF\n}\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst initialValues = {\n    gameDepth: 8,\n    gameNeed: 3,\n    gameSize: 3,\n    minSize: 3,\n    maxSize: 8\n}\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst pages = {\n    home: '',\n    seti: 'setings',\n    game: 'game'\n}\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst calcNeed = ( data ) => { return Math.floor( 3*Math.log( data )); }\nconst calcDepth = ( data ) => { return Math.floor(( 66*Math.log( data )) / ( data*data )); }\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport { mark, result, value, initialValues, pages, calcNeed, calcDepth };","import React, { createContext, useEffect, useState } from 'react';\n\nimport * as data from './data'\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst StoreContext = createContext(null);\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst StoreProvider = ({ children }) => {\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    const [ gameDepth, setGameDepth ] = useState( data.initialValues.gameDepth );\n    const [ gameNeed, setGameNeed ] = useState( data.initialValues.gameNeed );\n    const [ gameSize, setGameSize ] = useState( data.initialValues.gameSize );\n\n    const [ gameOver, setGameOver ] = useState( true );\n    const [ playerAI, setPlayerAI ] = useState( null );\n    const [ playerHU, setPlayerHU ] = useState( null );\n    const [ player, setPlayer ] = useState( null );\n\n    const [ pages, setPages ] = useState( data.pages );\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    useEffect(() => {\n\n    }, []);\n    \n    /*   *   *   *   *   *   *   *   *   *   */\n\n    const storeValue = {\n\n        //  game propeties\n        gameDepth, setGameDepth,\n        gameNeed, setGameNeed,\n        gameSize, setGameSize,\n\n        //  game status\n        gameOver, setGameOver,\n        playerAI, setPlayerAI,\n        playerHU, setPlayerHU,\n        player, setPlayer,\n\n        //  important data\n        pages, setPages,\n\n        //  global data\n        data\n    };\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    return(\n        <StoreContext.Provider value={storeValue}>\n            {children}\n        </StoreContext.Provider>\n)}\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default StoreProvider;\nexport { StoreContext, StoreProvider };","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\n\n//  icon\nimport { FaHome } from 'react-icons/fa';\nimport { VscDebugRestart } from 'react-icons/vsc';\n\n//  store\nimport { StoreContext } from '../store/store';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst TopInfo = () => {\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    const { pages } = useContext( StoreContext );\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    return (\n        <div className=\"topInfo\">\n            <Link exact to={pages.home} className=\"home\">   <FaHome />          </Link>\n            {/* <Link exact to={pages.game} className=\"game\">   <VscDebugRestart /> </Link> */}\n        </div>\n    );\n};\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default TopInfo;","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\n\n//  store\nimport { StoreContext } from '../store/store';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst Home = () => {\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    const { playerAI, playerHU, player } = useContext( StoreContext );\n    const { setPlayerAI, setPlayerHU, setPlayer } = useContext( StoreContext );\n    const { pages, data } = useContext( StoreContext );\n\n    const setPlayersMarks = ( mode ) => {\n        \n        if( mode ) {    //  AI -> X || HU -> O\n            setPlayerAI( prev => data.mark.O );\n            setPlayerHU( prev => data.mark.X );\n        }\n\n        if( !mode ) {   //  AI -> O || HU -> X\n            setPlayerAI( prev => data.mark.O );\n            setPlayerHU( prev => data.mark.X );\n        }\n    }\n\n    const setPlayerFirst = ( mode ) => {\n\n        if( mode ) {    //  X -> first\n            setPlayer( prev => data.mark.O );\n        }\n\n        if( !mode ) {   //  O -> first\n            setPlayer( prev => data.mark.X );\n        }\n    }\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    const isAllSet = ( playerAI && playerHU && player ) ? true : false;\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    return(\n    <section className=\"main-home\">  \n\n        <div className=\"elem\">\n            <h2 className=\"title\">Wybierz znak:</h2>\n            <div className=\"choice\">\n                <button className=\"btn __chioce __type-a\" onClick={() => setPlayersMarks(true)}>X</button>\n                <button className=\"btn __chioce __type-b\" onClick={() => setPlayersMarks(false)}>O</button>\n            </div>\n        </div>\n\n        <div className=\"elem\">\n            <h2 className=\"title\">Wybierz, kto zaczyna:</h2>\n            <div className=\"choice\">\n                <button className=\"btn __chioce __type-a\" onClick={() => setPlayerFirst(true)}>X</button>\n                <button className=\"btn __chioce __type-b\" onClick={() => setPlayerFirst(false)}>O</button>\n            </div>\n        </div>\n\n        <Link exact to={pages.seti} className={`btn next ${isAllSet && '__isVisible'}`}>Dalej</Link>\n\n    </section>\n)};\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default Home;","import React from 'react';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst Field = ({ id, row, col }) => {\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    return (\n        <div className=\"field\" id={id} data-row={row} data-col={col}></div>\n    );\n};\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default Field;","import React from 'react';\n\n//  component\nimport Field from './field';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst Board = ({ fields, gameID, size }) => {\n\n    const fieldsMap = fields.map(( elem, i ) =>\n        elem.map(( sub, j ) => <Field key={`field_r${i}_c${j}`} id={`field_r${i}_c${j}`} row={i} col={j} /> )\n    );\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    const style = {\n        gridTemplateColumns: `repeat( ${size}, 1fr )`,\n        gridTemplateRows: `repeat( ${size}, 1fr )`\n    };\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    return (\n        <div id={gameID} className=\"board darkable\" style={style}>{fieldsMap}</div>\n    );\n};\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default Board;","import * as data from '../store/data';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nclass Board {\n\n    constructor( selector, size, need ) {\n\n        this.selector = selector;\n        this.size = size;\n        this.need = need;\n\n        this.elem = null;\n        this.style = null;\n\n        //  document link refrence\n        this.fields = [];\n\n        //  2D array create\n        this.board = new Array( +size ).fill( null ).map( e => e = new Array( +size ).fill( null ));\n    }\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    setUp = () => {\n\n        this.elem = document.querySelector( this.selector );\n        if( this.elem ) {\n\n            //  empties board\n            this.setEmpty();\n\n            //  fields of board\n            this.fields = [ ...this.elem.querySelectorAll( '.field' ) ];\n\n            //  setup ok\n            return true;\n        }\n\n        //  setup not ok\n        return false;\n    }\n\n    setEmpty = () => {\n        \n        for( let i = 0; i < this.size; i++ ) {\n            for( let j = 0; j < this.size; j++ ) {\n                this.board[i][j] = data.mark.EMPTY;\n            }\n        }\n    }\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    isEmpty([ row, col ]) {\n\n        //  tests shift\n        if( row < 0 || row > this.size - 1 ) { return false; }\n        if( col < 0 || col > this.size - 1 ) { return false; }\n\n        //  tests board\n        if( this.board[ row ][ col ] === data.mark.EMPTY ) { return true; }\n\n        //  filed not empty\n        return false;\n    }\n\n    isTie( mark ) {\n\n        for( let i = 0; i < this.size; i++ ) {\n            for( let j = 0; j < this.size; j++ ) {\n                if( this.board[i][j] === data.mark.EMPTY ) { return false; }\n            }\n        }\n\n        return true;\n    }\n\n    isWin( mark ) {\n\n        //  tests rows\n        for( let i = 0; i < this.size; i++ ) {\n            for( let j = 0; j < this.size - this.need + 1; j++ ) {\n\n                //  posible win\n                if( this.board[i][j] === mark ) {\n\n                    let isWin = true;\n                    for( let k = 0; k < this.need; k++ ) {\n                        isWin = ( this.board[i][ j + k ] === mark ) ? isWin : false;\n                    }\n\n                    //  is true win\n                    if( isWin ) { return true; }\n                }\n            }\n        }\n\n        //  tests cols\n        for( let i = 0; i < this.size; i++ ) {\n            for( let j = 0; j < this.size - this.need + 1; j++ ) {\n\n                //  posible win\n                if( this.board[j][i] === mark ) {\n\n                    let isWin = true;\n                    for( let k = 0; k < this.need; k++ ) {\n                        isWin = ( this.board[ j + k ][i] === mark ) ? isWin : false;\n                    }\n\n                    //  is true win\n                    if( isWin ) { return true; }\n                }\n            }\n        }\n\n        //  test diagonal left-top . right-bottom\n        for( let i = 0; i < this.size - this.need + 1; i++ ) {\n            for( let j = 0; j < this.size - this.need + 1; j++ ) {\n                \n                //  posible win\n                if( this.board[i][j] === mark ) {\n\n                    let isWin = true;\n                    for( let k = 0; k < this.need; k++ ) {\n                        isWin = ( this.board[ i + k ][ j + k ] === mark ) ? isWin : false;\n                    }\n\n                    //  is true win\n                    if( isWin ) { return true; }\n                }\n            }\n        }\n\n        //  test diagonal right-top . left-bottom\n        for( let i = this.need - 1; i < this.size; i++ ) {\n            for( let j = 0; j < this.size - this.need + 1; j++ ) {\n\n                //  posible win\n                if( this.board[i][j] === mark ) {\n\n                    let isWin = true;\n                    for( let k = 0; k < this.need; k++ ) {\n                        isWin = ( this.board[ i - k ][ j + k ] === mark ) ? isWin : false;\n                    }\n\n                    //  is true win\n                    if( isWin ) { return true; }\n                }\n            }\n        }\n\n        return false;\n    }\n}\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default Board;","import * as data from '../store/data';\nimport Board from './board.js';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nclass TicTacToe {\n\n    constructor( selector, size, need, first, AI, HU, depth ) {\n\n        this.selector = selector;\n        this.depth = +depth;\n        this.size = +size;\n        this.need = +need;\n        \n        this.player = first;\n        this.playerAI = AI;\n        this.playerHU = HU;\n\n        this.gameOver = false;\n        this.gameTie = false;\n        this.gameWin = false;\n\n        this.board = new Board( selector, size, need );\n\n        //  final restart callback\n        this.callback = null;\n    }\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    setUp = ( callback ) => {\n\n        //  tests board\n        if( this.board.setUp() ) {\n\n            //  adds clicks\n            this.board.fields.forEach( field => field.addEventListener( 'click', ( e ) => this.handleClick( e ) ));\n\n            //  sets callback\n            this.callback = callback;\n\n            //  starts game\n            this.start();\n        }\n    }\n\n    handleClick = ( event ) => {\n        event.preventDefault();\n\n        //  tests\n        if( this.gameOver ) { return; }\n        if( this.player === this.playerAI ) { return; }\n\n        //  gets shift\n        const shift = { row: -1, col: -1 };\n        shift.row = +event.target.dataset.row;\n        shift.col = +event.target.dataset.col;\n\n        //  tests shift\n        if( this.board.isEmpty([ shift.row, shift.col ]) ) {\n            this.board.board[ shift.row ][ shift.col ] = this.player;\n            this.board.fields[ shift.row*this.size + shift.col ].classList.add( `__${this.player}` );\n\n            //  tests game status\n            if( this.testStatus() ) {\n\n                //  end of game detected\n                this.gameOver = true;\n                this.gameTie = this.board.isWin() ? false : true;\n                this.gameTie = this.board.isWin() ? true : false;\n\n                //  end of game\n                return;\n            }\n\n            //  changes player\n            this.player = this.playerAI;\n            this.shiftAI();\n        }\n    }\n\n    start = () => {\n\n        //  tests for AI\n        if( this.player === this.playerAI ) {\n            this.shiftAI();\n        }\n    }\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    shiftAI = () => {\n\n        console.log( this.board.board );\n\n        //  tests\n        if( this.gameOver ) { return; }\n        if( this.player === this.playerHU ) { return; }\n\n        //  gets best shift\n        const shift = this.bestShift();\n        if( this.board.isEmpty([ shift.row, shift.col ])) {\n            this.board.board[ shift.row ][ shift.col ] = this.player;\n            this.board.fields[ shift.row*this.size + shift.col ].classList.add( `__${this.player}` );\n\n            //  tests game status\n            if( this.testStatus() ) {\n    \n                //  end of game detected\n                this.gameOver = true;\n                this.gameTie = this.board.isWin() ? false : true;\n                this.gameTie = this.board.isWin() ? true : false;\n    \n                //  end of game\n                return;\n            }\n\n        } else {\n\n            //  an error has ocured\n            console.error( 'AI shift not set!!! ');\n            console.log( shift );\n        }\n\n        //  changes player\n        this.player = this.playerHU;\n    }\n\n    testStatus = () => {\n\n        if( this.board.isWin( this.player )) { return true; }\n        if( this.board.isTie( this.player )) { return true; }\n\n        return false;\n    }\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    bestShift = () => {\n\n        let best = data.value.N_INF;\n        const shift = { row: -1, col: -1 }\n\n        /*   *   *   *   *   *   *   *   *   *   */\n\n        for( let i = 0; i < this.size; i++ ) {\n            for( let j = 0; j < this.size; j++ ) {\n\n                //  tests for possible moves\n                if( this.board.isEmpty([ i, j ]) ) {\n\n                    //  tests move\n                    this.board.board[i][j] = this.playerAI;\n\n                    const score = this.minimax( 0, false, data.value.N_INF, data.value.P_INF );\n                    console.log( ` [ row: ${i} | col: ${j} ] :: score -> ${score} ` );\n\n                    //  better move detected\n                    if( score > best ) {\n                        best = score;\n                        shift.row = i;\n                        shift.col = j;\n                    }\n\n                    //  restores move\n                    this.board.board[i][j] = data.mark.EMPTY;\n                }\n            }\n        }\n\n        /*   *   *   *   *   *   *   *   *   *   */\n\n        return shift;\n    }\n\n    minimax = ( depth, AI, alpha, beta ) => {\n\n        //  terminal states\n        if( depth > this.depth ) { return data.result.TIE; }\n\n        if( this.board.isWin( this.playerAI )) { return ( data.result.WIN * ( 2*this.depth - depth )); }\n        if( this.board.isWin( this.playerHU )) { return ( data.result.LOSE * ( 2*this.depth - depth )); }\n        if( this.board.isTie() ) { return data.result.TIE; }\n\n        /*   *   *   *   *   *   *   *   *   *   */\n        if( AI )    //  MAXIMIZE\n        /*   *   *   *   *   *   *   *   *   *   */\n        {\n            let best = data.value.N_INF;\n            let cutoff = false;\n\n            /*   *   *   *   *   *   *   *   *   *   */\n\n            for( let i = 0; i < this.size; i++ ) {\n                for( let j = 0; j < this.size; j++ ) {\n\n                    //  tests for possible moves\n                    if( this.board.isEmpty([ i, j ]) ) {\n\n                        //  tests move\n                        this.board.board[i][j] = this.playerAI;\n\n                        const score = this.minimax( depth + 1, false, alpha, beta );\n\n                        //  better move detected\n                        if( score > best ) {\n                            best = score;\n                        }\n\n                        //  restores move\n                        this.board.board[i][j] = data.mark.EMPTY;\n\n                        //  alpha - beta\n                        alpha = ( score > alpha ) ? score : alpha;\n                        cutoff = ( beta <= alpha ) ? true : false;\n\n                        //  check cutoff\n                        if( cutoff ) { break; }\n                    }\n                }\n            }\n            \n            /*   *   *   *   *   *   *   *   *   *   */\n\n            return best;\n        }\n        /*   *   *   *   *   *   *   *   *   *   */\n        else        //  MINIMIZE\n        /*   *   *   *   *   *   *   *   *   *   */\n        {\n            let worst = data.value.P_INF;\n            let cutoff = false;\n\n            /*   *   *   *   *   *   *   *   *   *   */\n\n            for( let i = 0; i < this.size; i++ ) {\n                for( let j = 0; j < this.size; j++ ) {\n\n                    //  tests for possible moves\n                    if( this.board.isEmpty([ i, j ]) ) {\n\n                        //  tests move\n                        this.board.board[i][j] = this.playerHU;\n\n                        const score = this.minimax( depth + 1, true, alpha, beta );\n\n                        //  better move detected\n                        if( score < worst ) {\n                            worst = score;\n                        }\n\n                        //  restores move\n                        this.board.board[i][j] = data.mark.EMPTY;\n\n                        //  alpha - beta\n                        beta = ( score < beta ) ? score : beta;\n                        cutoff = ( beta <= alpha ) ? true : false;\n\n                        //  check cutoff\n                        if( cutoff ) { break; }\n                    }\n                }\n            }\n            \n            /*   *   *   *   *   *   *   *   *   *   */\n\n            return worst;\n        }\n        /*   *   *   *   *   *   *   *   *   *   */\n    }\n}\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default TicTacToe;","import React, { useContext, useEffect } from 'react';\n\n//  store\nimport { StoreContext } from '../store/store';\n\n//  component\nimport Board from '../component/board';\nimport TicTacToe from '../script/ticTacToe';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst Game = () => {\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    const { gameSize, gameNeed, gameDepth } = useContext( StoreContext );\n    const { playerAI, playerHU, player } = useContext( StoreContext );\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    const fields = new Array( +gameSize ).fill( new Array( +gameSize ).fill( null ) );\n    const gameID = \"boardTicTacToe\";\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    useEffect(() => {\n\n        const ticTacToe = new TicTacToe( `#${gameID}`, gameSize, gameNeed, player, playerAI, playerHU, gameDepth );\n        ticTacToe.setUp();\n\n    }, [ gameSize, gameNeed, gameDepth, player, playerAI, playerHU ]);\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    return(\n    <>\n        <Board fields={fields} gameID={gameID} size={gameSize} />\n    </>\n)};\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default Game;","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\n\n//  store\nimport { StoreContext } from '../store/store';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst Seti = () => {\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    const { gameSize, gameNeed, gameDepth } = useContext( StoreContext );\n    const { setGameSize, setGameNeed, setGameDepth } = useContext( StoreContext );\n    const { data, pages } = useContext( StoreContext );\n\n    const changeGameSize = ( event ) =>{\n        setGameSize( prev => event.target.value );\n        setGameNeed( data.calcNeed( event.target.value ));\n        setGameDepth( data.calcDepth( event.target.value ));\n\n    }\n\n    const changeGameNeed = ( event ) =>{\n        setGameNeed( prev => event.target.value );\n    }\n\n    const changeGameDepth = ( event ) =>{\n        setGameNeed( prev => event.target.value );\n    }\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    const min = data.initialValues.minSize;\n    const max = data.initialValues.maxSize;\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    const isAllSet = ( gameSize && gameNeed && gameDepth ) ? true : false;\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    return(\n        <section className=\"main-seti\">  \n\n        <div className=\"elem\">\n            <h2 className=\"title\">Wybierz rozmiar gry:</h2>\n            <input type=\"range\" min={min} max={max} value={gameSize} onChange={(e) => changeGameSize(e)} />\n            <span>{gameSize}</span>\n        </div>\n\n        <div className=\"elem\">\n            <h2 className=\"title\">Wybierz rząd gry:</h2>\n            <input type=\"range\" min={data.calcNeed(gameSize)} max={gameSize} value={gameNeed} onChange={(e) => changeGameNeed(e)} />\n            <span>{gameNeed}</span>\n        </div>\n\n        <div className=\"elem\">\n            <h2 className=\"title\">Wybierz poziom:</h2>\n            <input type=\"range\" min={2} max={data.calcDepth(gameSize)} value={gameDepth} onChange={(e) => changeGameDepth(e)} />\n            <span>{gameDepth}</span>\n        </div>\n\n        <Link exact to={pages.game} className={`btn next ${isAllSet && '__isVisible'}`}>Dalej</Link>\n\n    </section>\n)};\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default Seti;","import React, { useContext } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\n//  store\nimport { StoreContext } from '../store/store';\n\n//  lauout\nimport Home from './Home';\nimport Game from './Game';\nimport Seti from './Seti';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst Main = () => {\n\n    const { offer, pages } = useContext(StoreContext);\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    return(\n    <Switch>\n\n        <Route exact path={`/${pages.home}`} render={() => <Home />} />\n\n        <Route exact path={`/${pages.game}`} render={() => <Game />} />\n\n        <Route exact path={`/${pages.seti}`} render={() => <Seti />} />\n        \n    </Switch>\n)};\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default Main;","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n//  store\nimport StoreProvider from './store/store';\n\n//  component\nimport TopInfo from './component/topInfo';\nimport Main from './layout/Main';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nconst App = () => {\n\n\n\n    /*   *   *   *   *   *   *   *   *   *   */\n\n    return (\n    <StoreProvider>\n        <Router>\n\n            <TopInfo />\n\n            <Main />\n\n        </Router>\n    </StoreProvider>\n    );\n};\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//  component\nimport App from './app';\n\n//  stylesheet\nimport './style/main.scss';\n\n/*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */\n\nReactDOM.render(\n\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n\n    document.getElementById('root')\n);"],"sourceRoot":""}